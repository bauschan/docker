image: docker:18.03.0-ce


variables:
  DOCKER_DRIVER: overlay2
  RELEASE_TAG: ''
  DEMO_TAG: ''
  LATEST_TAG: ''
  DOTCMS_CORE_BRANCH: master

services:
  - docker:dind

stages:
  - imageprep
  - imagebuild

imageprep:
  stage:  imageprep
  image: dotcms/imagebuilderutility:latest
  script:
    - echo "imageprep - $CI_COMMIT_REF_NAME"
    - date
    - pwd
    - printenv 
    - mkdir /workdir
    - curl https://old.dotcms.com/api/content/query/+structureName:DotcmsNightlyBuilds%20+conhost:SYSTEM_HOST%20+live:true%20+DotcmsNightlyBuilds.branch:${DOTCMS_CORE_BRANCH}/limit/1 >/workdir/content.json
    - LAST_BUILD=`jq --raw-output .contentlets[0].commitNumber /workdir/content.json`
    - echo ${LAST_BUILD}
    - LAST_COMMIT_ID=${LAST_BUILD::7}
    - echo LAST_COMMIT_ID=${LAST_COMMIT_ID}
    - TIMESTAMP=`jq --raw-output .contentlets[0].timestamp /workdir/content.json`
    - BUILD_DATE=${TIMESTAMP::4}${TIMESTAMP:5:2}${TIMESTAMP:8:2}
    - echo ${BUILD_DATE}
    - echo "${CI_REGISTRY_IMAGE}:${DOTCMS_CORE_BRANCH}-nightly-${BUILD_DATE}-commit-${LAST_COMMIT_ID}">pass_tagName
    - cat pass_tagName
    - TAR_GZ_FILENAME=`jq --raw-output .contentlets[0].targz /workdir/content.json`
    - echo "https://old.dotcms.com/${TAR_GZ_FILENAME}">pass_tarURL
    - cat pass_tarURL
    - TOKEN=`curl -u ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${CI_REGISTRY_IMAGE}:pull" | jq --raw-output .token`
    - echo TOKEN=${TOKEN}
    - STATUSCODE=`curl -s -o /dev/null -w "%{http_code}" "https://registry.hub.docker.com/v2/${CI_REGISTRY_IMAGE}/manifests/dotcms-${DOTCMS_CORE_BRANCH}-nightly-${BUILD_DATE}-commit-${LAST_COMMIT_ID}" -H "Authorization:Bearer ${TOKEN}"`
    - echo "${STATUSCODE}">pass_statusCode
    - cat pass_statusCode
  artifacts:
    paths:
      - pass_statusCode
      - pass_tagName
      - pass_tarURL
  only:
    - schedules

imagebuild:
  stage: imagebuild
  script:
    - echo "imagebuild - $CI_COMMIT_REF_NAME"
    - pwd
    - ls
    - STATUSCODE=`cat pass_statusCode`
    - echo "STATUSCODE=${STATUSCODE}"
    - if [ "${STATUSCODE}" == "200" ]; then echo 'Image already exists - skipping rest of build'; exit 0; fi
    - TAG=`cat pass_tagName`
    - echo "TAG=${TAG}"
    - TAR_GZ_FILENAME=`cat pass_tarURL`
    - echo "TAR_GZ_FILENAME=${TAR_GZ_FILENAME}"
    - docker build --pull --build-arg BUILD_FROM=TARBALL_URL --build-arg BUILD_ID=${TAR_GZ_FILENAME} -t ${CI_REGISTRY}/${TAG} ./images/dotcms/
    - if [[ -n "${RELEASE_TAG}" ]]; then docker tag ${TAG} "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${RELEASE_TAG}; fi
    - if [[ -n "${DEMO_TAG}" ]]; then docker tag ${TAG} "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${DEMO_TAG}; fi
    - if [[ -n "${LATEST_TAG}" ]]; then docker tag ${TAG} "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${LATEST_TAG}; fi
    - docker logout
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push ${CI_REGISTRY}/${TAG}
    - if [[ -n "${RELEASE_TAG}" ]]; then docker push "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${RELEASE_TAG}; fi
    - if [[ -n "${DEMO_TAG}" ]]; then docker push "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${DEMO_TAG}; fi
    - if [[ -n "${LATEST_TAG}" ]]; then docker push "${CI_REGISTRY}/$CI_REGISTRY_IMAGE":${LATEST_TAG}; fi
  dependencies:
    - imageprep
  only:
    - schedules
